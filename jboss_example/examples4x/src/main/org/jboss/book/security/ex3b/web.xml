<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC
   "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
   "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
   <description>A Customized version of the http-invoker.sar/invoker.war
   descriptor that sets up a read-only context
   </description>
    <filter>
      <filter-name>ReadOnlyAccessFilterHA</filter-name>
      <filter-class>org.jboss.invocation.http.servlet.ReadOnlyAccessFilter</filter-class>
      <init-param>
         <param-name>readOnlyContext</param-name>
         <param-value>srp-readonly</param-value>
         <description>The top level JNDI context the filter will enforce
         read-only access on. If specified only Context.lookup operations
         will be allowed on this context. Another other operations or lookups
         on any other context will fail. Do not associate this filter with the
         JMXInvokerServlets if you want unrestricted access.
         </description>
      </init-param>
      <init-param>
         <param-name>invokerName</param-name>
         <param-value>jboss:service=HAJNDI</param-value>
         <description>The JMX ObjectName of the HA-JNDI naming service mbean
         </description>
      </init-param>
    </filter>

    <filter-mapping>
      <filter-name>ReadOnlyAccessFilterHA</filter-name>
      <url-pattern>/readonly/*</url-pattern>
    </filter-mapping>

<!-- ### Servlets -->
    <servlet>
        <servlet-name>EJBInvokerHAServlet</servlet-name>
        <description>The EJBInvokerHAServlet handles requests to EJBs that
           use the "jboss:service=invoker,type=httpHA" service as their invoker.
        </description>
        <servlet-class>org.jboss.invocation.http.servlet.InvokerServlet</servlet-class>
        <init-param>
            <param-name>invokerName</param-name>
            <param-value>jboss:service=invoker,type=httpHA</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>JMXInvokerHAServlet</servlet-name>
        <description>The JMXInvokerHAServlet receives posts containing serlized
        MarshalledInvocation objects that are routed to the invoker given by
        the invokerName init-param. The return content is a serialized
        MarshalledValue containg the return value of the inovocation, or any
        exception that may have been thrown.
        </description>
        <servlet-class>org.jboss.invocation.http.servlet.InvokerServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet>
        <servlet-name>ReadOnlyJNDIFactoryHA</servlet-name>
        <description>A servlet that exposes the JBoss JNDI Naming service stub
        through http, but only for a single read-only context. The return content
        is a serialized MarshalledValue containg the org.jnp.interfaces.Naming
        stub.
        </description>
        <servlet-class>org.jboss.invocation.http.servlet.NamingFactoryServlet</servlet-class>
       <init-param>
           <param-name>namingProxyMBean</param-name>
           <param-value>jboss:service=invoker,type=httpHA,target=HAJNDI,readonly=true</param-value>
           <description>The HA capable invoker name.
           </description>
       </init-param>
       <init-param>
          <param-name>proxyAttribute</param-name>
          <param-value>Proxy</param-value>
       </init-param>
        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet>
        <servlet-name>HAJNDIFactory</servlet-name>
        <description>A servlet that exposes the JBoss JNDI Naming service stub
        through http. The return content is a serialized
        MarshalledValue containg the org.jnp.interfaces.Naming stub. This
        configuration handles requests for the HA JNDI naming service.
        </description>
        <servlet-class>org.jboss.invocation.http.servlet.NamingFactoryServlet</servlet-class>
       <init-param>
           <param-name>namingProxyMBean</param-name>
           <param-value>jboss:service=invoker,type=httpHA,target=HAJNDI,restricted=true</param-value>
           <description>The HA capable invoker name.
           </description>
       </init-param>
       <init-param>
          <param-name>proxyAttribute</param-name>
          <param-value>Proxy</param-value>
       </init-param>
       <load-on-startup>3</load-on-startup>
    </servlet>

<!-- ### Servlet Mappings -->

    <servlet-mapping>
        <servlet-name>ReadOnlyJNDIFactoryHA</servlet-name>
        <url-pattern>/ReadOnlyJNDIFactoryHA/*</url-pattern>
    </servlet-mapping>
    <!-- Alternate mappings that place the servlets under the restricted
    path to required authentication for access. Remove the unsecure mappings
    if only authenticated users should be allowed.
    -->
    <servlet-mapping>
        <servlet-name>HAJNDIFactory</servlet-name>
        <url-pattern>/restricted/HAJNDIFactory/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>EJBInvokerHAServlet</servlet-name>
        <url-pattern>/EJBInvokerHAServlet/*</url-pattern>
    </servlet-mapping>
    <!-- An unsecured mapping used by the SRP authentication service -->
    <servlet-mapping>
        <servlet-name>JMXInvokerHAServlet</servlet-name>
        <url-pattern>/SRPInvokerHAServlet/*</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>JMXInvokerHAServlet</servlet-name>
        <url-pattern>/restricted/JMXInvokerHAServlet/*</url-pattern>
    </servlet-mapping>
    <!-- A mapping for the JMXInvokerHAServlet that only allows invocations
    of lookups under a read-only context. This is enforced by the
    ReadOnlyAccessFilterHA.
    -->
   <servlet-mapping>
       <servlet-name>JMXInvokerHAServlet</servlet-name>
       <url-pattern>/readonly/JMXInvokerHAServlet/*</url-pattern>
   </servlet-mapping>

   <!-- An example security constraint that restricts access to the HTTP invoker
   to users with the role HttpInvoker Edit the roles to what you want and
   configure the WEB-INF/jboss-web.xml/security-domain element to reference
   the security domain you want.
   -->
   <security-constraint>
      <web-resource-collection>
         <web-resource-name>HttpInvokers</web-resource-name>
         <description>An example security config that only allows users with the
            role HttpInvoker to access the HTTP invoker servlets
         </description>
         <url-pattern>/restricted/*</url-pattern>
         <http-method>GET</http-method>
         <http-method>POST</http-method>
      </web-resource-collection>
      <auth-constraint>
         <role-name>HttpInvoker</role-name>
      </auth-constraint>
   </security-constraint>
   <login-config>
      <auth-method>BASIC</auth-method>
      <realm-name>JBoss HTTP Invoker</realm-name>
   </login-config>

   <security-role>
      <role-name>HttpInvoker</role-name>
   </security-role>
</web-app>
